Создаем новую папку handlers.
--------
(1)В этой папке создаем 3 отдельных файла(admin,client,other).
--------
(2) И в этой папке нам нужно создать файл с именем __init__ и расширением py.Этот файл нужен
что бы организовать пакет из нашей папки хендлерс.
В файл __init__ запишем импорты всех модулей(admin,client,other).Это получается пакет.
В основной файл bot_telegram будем импортировать пакет для удобства импортов.
Записываем импорты всех документов(from import).Т.к интерпретатор будет исполняться,
точкой входа файл bot_telegram.py,то нам нужно импортировать не на прямую(напиример import 
admin в файл init),то нам нужно отталкиваться по иерархии пути от папки handlers,которую видит
в данном случаем интерпретатор.
Первым записываем импорт части клиента(потому что он по иерархии хендлера,в которой у нас 
прописаны - первый).
	from handlers import client

Далее записываем остальные импорты(admin,other).
	from handlers import admin
	from handlers import other

Сохраняем.Файл init заканчиваем писать.
---------
(3) Теперь начинаем разделять хендлеры.У нас есть основной файл,в котором все прописано(пока что).

(3.1) Все хендлеры из клиентской части переносим в файл client.Далее нужно сделать соответствуеющие
импорты(то,что используем здесь из библиотеки aiogram).В данному случае это types.
Пишем from aiogram import types.На этом пока что все.Так же из главного файла в этот нужно перенести
ипорт json и string (их используем для фильтра мата)

(3.2) Так же переносим хендлер в общую часть(other).Тут тоже из aiogram нужно импортировать types.
 
Теперь в основном файле(bot_telegram) убираем импорт types,оставляем только бота,диспетчера и 
экзекьютера.
Заметьте,в дополнительных файлах(admin,client,other) мы используем несколько объектов,которые 
создаются в основном файле,т.е это dp(диспетчер) и в файле client есть bot(экземпляр бота).На нужно
эти экземпляры передать в файлы,что бы код работал без ошибок и потом эти же хендлеры нужно передать
обратно в гланый файл.
В питоне такой импорт вызывает ошибку,обойти это можно при помощи кода(но очень громоздко),но есть 
и другое решение:для этого в осн.папке создаем доп.файл create_bot.py(сохр рядом с основным файлом).

			ТУТ ЗАКОНЧИЛ №4  7.00  

Это нужно,что бы произвести взаимоимпорты,что бы не было ошибки.В файл create_bot
переносим все то,что касается создания экземпляров бота(находится в основном файле,перед клиентской 
частью : импорт класса бота и диспетчера и создание экземпляров бота и диспетчера.Нужно импортировать 
модуль os т.к при помощи него мы тут читаем токен.Промежуточный файл готов.

В главном файле экзекьютер мы оставляем.Функцию(код) исполняющийся во время старта тоже оставляем тут.

(3.3) Теперь файл(bot_telegram) - файл входа,который мы запускаем во время старта пулинга бат-файлом,
в файле create_bot(находится рядом)создаются экземпляры бота,поэтому т.к в экзекьютер нам необходимо 
передать диспэтчер - записываем from create_bot import dp (импортируем диспэтчер,который записываем в 
executor.start_polling).
Далее в файл client нужно импортировать диспэтчер dp и бот bot,что бы код работал нормально.Импортировать
будет из файла create_bot (from create_bot import db,bot).В модель other также импортируем диспэтчер,
т.к там отдельный хендлер.

Теперь нужно немного по-другому записать хэнделы и передать их в файл старат bot_telegram.До этого мы сделали
разводку,что бы не было ошибок импорта(в файле create_bot создали бота,импортировали(передали) его в точку 
входа(гл.файл) и разнесли по модулям(нашим файлам),в которых содержится код хэнлеров.
Теперь переписываем хэндлеры и импортируем их в файл bot_telegram.Для этого:
	декораторы(@dp.message_handler(commands=['start', 'help'] и @dp.message_handler(commands=['Режим_работы'])
	и @dp.message_handler(commands=['Расположение']) из файла client) нам не нужны(закоментируем) если пишем
	однофайлового бота
Теперь записываем ф-ию (register_handlers_client),в которой нужно записать команды для регестрации хэндлеров для нашего бота.И передать с помощью
этой ф-ии хэндлеры в основной файл.В эту ф-ию нужно передать диспэтчер dp,для него нужно написать аннотацию типа(: Dispatcher)(класс Dispatcher как
образец для аннотации нужно импортировать в файл),т.к это aiogram.
В коде ф-ии пишем код обращаясь к диспетчеру dp и у него есть метод .register_message_handler (спец.метод,который регистрирует хэндлер для нашего бота).
Внутри пишем имя ф-ии которая относится к какому-либо хэндлеру,далее commands (команды,на которые она реагирует).Все,регистрация хэндлера записана(полу-
чается,вместо декоратора записываем эту конструкцию).Все,этот файл готов!

(3.4) Теперь тоже самое нужно сделать в другом модуле(в файле с другим хэндлеро) other.Копируем туда такую же ф-и но изменяем название(client на other).
Меняем имя ф-ии на echo_send(к примеру),т.к у нее тут команд нет,то в скобках убираем команды.И закомментируем декоратор @dp.message_handler().Для аннотации
типа так же нужно добавить Dispatcher.Все,файл готов!

(3.5) Тепер эти ф-ии(register_handlers_other и register_handlers_client)переносим в осн.файл bot_telegram.Для этого записываем импорт from пакет handlers
(лежит рядом с файлом) import записываем явные импорты(что бы все было ясно) импортируем модуль client,модуль admin(пока что пустой,но запишем сразу этот
импорт) и модуль other.
И теперь тут просто запускаем эти ф-ии : из модуля client запускаем ф-ию register_handlers_client,в нее передаем dp(т.к он используется в clien(вызываем его метод)),
тоже самое делаем с модулем other.Таким образом,этими командами,регистрируем все хэндлеры для нашего бота.
В папке other есть пустой хендлер dp.message_handler(),он должен располагаться ниже хэндлеров,в которых есть какие-то команды,поэтому в осн.файле его импортируем последним.
