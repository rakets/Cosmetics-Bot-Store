---Открываем файл bot_telegram.py---
Для написания простого бота потребуется 3 импорта:
1)из aiogram.utils импортируем executor,что бы запустить бота,что бы он вышел в онлайн
	from aiogram.utils import executor
2)импортируем класс Bot и types(спец.типы данных,что бы можно было писать аннотации типов в функциях
	from aiogram import Bot,types
3)из aiogram.dispatcher импорт класса Dispatcher(бот сможет улавливать события)
	from aiogram.dispatcher import Dispatcher

Так же делаем импорт модуля os,что бы могли прочитать токен из переменной среды окружения
	import os 
__________________
Что бы бот работал независимо от нас,используем метод webhook, для тестов пользуемся методом LongPolling.
__________________
----Для начала инициализируем нашего бота---
в него читаем наш токен.Пишем token= далее нам понадобится os и метод .getenv и в него записываем имя 
переменной(ее назвали TOKEN).Итак,токен мы прочитали.
	bot = Bot(token=os.getenv("TOKEN"))

---Далее инициализируем dispatcher---
передаем туда экземпляр нашего бота
	dp = Dispatcher(bot)

---Пишем команду запуска нашего бота executor.start_polling (обычно размещается в самом конце)---
в нее передаем диспетчер dp и записываем команду skip_updates,в ней
устанавливаем значение True(команда пропускать уведомления,т.е когда бот не онлайн,если ему приходят сообщения,то когда он заходит в онлайн-
все сообщения наваливаются на него и он на них отвечает.Если записать эту команду,то он пропускае сообщения,которые пришли ему,когда он не 
онлайн.Если не написать эту команду,то когда бот зайдет в онлайн - на него навалятся все сообщения) 
	executor.start_polling(dp, skip_updates=True)

---Теперь до команды запуска напишем первую ф-ию---
При помощи диспетчера dp записываем декоратор @dp через . с названием message_handler с пустыми скобками ().Т.е сюда будет попадать вот такой
пустой декоратор.Обозначает событие,когда в наш чат кто-то что-то пишет вообще.
	@dp.message_handler()
После него записываем функцию,которую он декорирует(ассинхронную ф-ю,т.к aiogram это ассинхронная библиотека),назовем ее echo_send
	async def echo_send():
В эту ф-ию будут попадать любые текстовые сообщения для бота,которые отправляют пользователи в чат.
Далее.Как же нам сделать эхо-бота?Для начала в ф-ии echo_send() нужно записать пар-р message и аннотацию типа
для него,т.е устанавливаем : и нам из types нужно записать образец Message.Т.е сюда будет попадать событие сообщения
в наш чат.
	async def echo_send(message : types.Message):

Теперь необходимо отправить ответное сообщение нашим ботом.Есть 3 СПОСОБА:

(Способ 1)
Записываем ключевое слово await(относится к ассинхронности async,т.е подождать пока в потоке не появится свободное место,для выполнения этой 
команды).Далее нам там нужно message(событие) и пишем answer(ответ) и в скобках передаем сообщение(которое хотим отправить обратно),в данном 
случае из message получаем текст.
	await message.answer(message.text)

(Способ 2)
По факту тоже самое,только указываем reply(еще будет упоминать сообщение на которое отвечает)
	await message.reply(message.text)

Эти 2 способа позвол.боту отправить сообщение в ответ независимо куда писал пользователь:в группу или в л.с	

(Способ 3)
Это вариант позволяет отправить сообщение непосредственно в л.с пользователю.В этом способе,если пользователь
написал в какуб-либо группу,но не писал самому боту,то бот первый написать не может.Т.е этот способ сработает,если пользователь
уже когда-либо писал боту или первый добавился в контакт.Cюда нам нужно записать id пользователя,получить его можно через message.from_user.id
через запятую пишем то,что хотим отправить(в данном случаем напишем тоже самое message.text
	await bot.send_message(message.from_user.id, message.text)
------------
Рассмотрим лучше декоратор @dp.message_handler() 
Декоратор без прописанных команд улавливает любые сообщения,которые отправляются этому боту,соответственно тут можно написать ветку проверок,что бы
в зависимости от того что написал пользователь,бот мог ответить разные реплики.
	  if message.text == 'привет' or message.text == 'Привет':
          	await message.answer('И тебе привет')  
          else:
          	await message.answer(message.text)

Можно использовать разные способы(3шт были описаны выше),что бы ответить на то или иное сообщениие.
-------------------------------------

















из aiogram.utils импортируем executor что бы запустить бота,что бы он вышел в онлайн
	from aiogram.utils import executor
запишем ф-ию которая запускается во время старта(выхода бота в онлайн)
в данном случае декоратор не нужен,просто записываем ассинхронную ф-ию и называем on_startup() в параметрах записываем '_'
	async def on_startup(_):
и далее записываем код,который необходим нам в этой ф-ии(что бы он сообщал,что подключился,подключался к базе данных).
	print('Бот вышел в онлайн')
Что бы запустить эту ф-ию ее нужно передать в экзекьютер(в экзекьютер записываем третий аргумент (пар-р on_startup,в который
нам необходимо передать ф-ию on_startup)

