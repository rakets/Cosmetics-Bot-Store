------------------------

Админки для бота можно делать при помощи Django или Flask - отельно выносить на сервер(как сайт),но
можно сделать админку при помощи самого телеграмма.

-------------------------
Переходим в модуль где объявляем класс диспатчера для бота(dp = Dispatcher(bot)),
в данном случае файл create_bot.

Т.к машина состояний позволяет задать пользователю ряд взаимосвязных вопросов и запомнить ряд
ответов от пользователя,то нужно указать хранилище,где бот будет хранить эти данные(место,где
он все это запомнит).Для этого будем использователь самое простое MemoryStorage(позволяет хранить
данные в оперативной памяти).

Для этого импортируем из aiogram.contrib.fsm_storage.memory класс MemoryStorage (класс хранилища.MemoryStorage-простое хранилище, которое сохраняет данные в оперативной памяти компьютера)
	from aiogram.contrib.fsm_storage.memory import MemoryStorage

Так же aiogram поддерживает еще несколько хранилищь,которые уже основаны на базах данных(Mongo и aioredis).
Если нужно прописать машину состояний(запоминать последовательность ответов\действий пользователя)
с очень важной информацией,нужно использовать какое-либо файловое хранилище,т.е базу данных Mongo или
aioredis,т.к если во время хранения полученных от пользователя вылетит из сети(выйдет в оффлайн),то
данные потеряются,т.к хранятся в оперативке.Если они хранятся в файловой базе,то когда бот снова выйдет 
в онлайн,то бот дальше продолжит с ним работать.Но если вы полученные данные сразу отправляете в обработку
(например:пишите в какую-то другую БД),то в таком случае простого хранилища с оперативкой MemoryStorage будет 
достаточно.

После импортирования класса MemoryStorage,создаем переменную storage и здесь запускаем этот класс:
	storage = MemoryStorage()

Там,где у нас запуск класс Dispatcher,в который передаем класс бота(dp = Dispatcher(bot)),дописываем аргумент(
в аргумент storage (аргумент хранилища) передаем экземпляр(переменную) storage:
	dp = Dispatcher(bot, storage=storage)

Все,с местом,где мы будем хранить полученные ответы от пользователя определились.

-----Код файла create_bot:

	from aiogram import Bot                     #импортируем класс Bot и types(спец.типы данных,что бы можно было писать аннотации типов в функциях).При разбивке по модулям types отсюда убралось.
	from aiogram.dispatcher import Dispatcher   #из aiogram.dispatcher импорт класса Dispatcher(бот сможет улавливать события)

	from aiogram.contrib.fsm_storage.memory import MemoryStorage  #импорт класс хранилища MemoryStorage.MemoryStorage-простое хранилище, которое сохраняет данные в оперативной памяти компьютера

	import os                                   #импорт модуля os,что бы могли прочитать токен из переменной среды окружения

	# from config_bot_cosmetiks import TOKEN
	# bot = Bot(token=TOKEN)                    #инициализируем бота и читаем токен

	storage = MemoryStorage()                   #создание объекта-хранилища MemoryStorage (хранение в оперативке компа)

	bot = Bot(token=os.getenv('TOKEN'))         #инициализируем бота и читаем токен
	dp = Dispatcher(bot, storage=storage)       #инициализируем dispatcher и передаем туда экземпляр нашего бота bot
        	                                    #в аргумент хранилища storage передаем объект-хранилище

------------------------------------------------

Переходим в handlers>admin.py ,в котором напишем админку для бота.

Запишем нужные импорты: 
	из aiogram.dispatcher импортируем FSMContext (для аннотации типа(т.е в хэндлерах будем указывать о том,
	что этот хэндлер используется конкретно в машине состояний))
		from aiogram.dispatcher import FSMContext   #для аннотации типа
	
	из aiogram.dispatcher.filters.state импортируем класс State и класс StatesGroup
		from aiogram.dispatcher.filters.state import State, StatesGroup

Сначала нужно создать класс наших состояний(записываем class,даем ему имя(в данном случае FSMAdmin)
	class FSMAdmin()

далее нужно наследоваться от базового класса StatesGroup(прописываем в скобках):
	class FSMAdmin(StatesGroup)	

В этом классе запишем 4 состояния(в данном случае):

----------------------------------------------------------------    ЗАКОНЧИЛИ ТУТ 8.30   --------------------------

	т.е у нас будет класс с 4-мя пунктами последовательных вопросов.
	1)отправка фотографии(т.е подгружаем меню): заводим переменную photo и запускаем класс State(). 
	2)название пиццы: заводим переменную name и запускаем класс State()
	3)описание пиццы: заводим переменную description и запускаем класс State()
	4)цена: заводим переменную price и запускаем класс State()
	